   -- Неудачные тестовые примеры для проверки функций библиотеки
   -- для работы с полиморфными бинарными деревьями поиска
   -------------------------------------------------------
   import Tr_Polim
   import Lam_B hiding (test1,test2,test3,test4,test5,test6,
                        test7,test8,test9,test10,test11,test12,
                        test13)

   -- *********************************
   -- Набор полиморфных деревьев поиска
   -- *********************************
  
   ----------------------------------
   -- Числовое бинарное дерево поиска
   ------------------------------------------------------
   tree = node 10 (node 6 (list 3) (node 7 nil (list 8)))
                  (node 15 (list 12) 
                           (node 18 (list 17.0) nil))
   --------------------------------------------------
   -- Бинарное дерево поиска символов
   ----------------------------------------------------------------
   tree1 = node '1' (node '6' (list '3') (node '7' nil (list '8')))
                    (node '5' (list '2') 
                              (node '8' (list '7') nil))
   -----------------------------------------------------
   -- Бинарные деревья поиска списков
   ----------------------------------
   tree2 = node [1,2,3] nil nil
   tree3 = mapBTree (\x -> [x]) tree
   --------------------------------------------------
   -- Бинарное дерево поиска бинарных деревьев поиска
   --------------------------------------------------
   tree4 = mapBTree (\x -> consTree x) tree3

   -- *********************
   -- Тестирование функций:
   -- *********************
   test1  = outTree tree
   test1' = outTree' tree
   test2  = outTree (delete' 10 tree)
   ----------------------------------
   test3  = outTree tree1
   test3' = outTree' tree1
   test4 = lkpObh tree1
   ---------------------
   test5 = outTree tree2
   test6 = outTree tree3 
   test7 = outTree tree4

   -- *********************************************
   -- Построение дерева лямбда-термов, отображающих
   -- следующие операции:
   -- (1) логическое "И";
   -- (2) логическое "ИЛИ";
   -- (3) импликация.
   ---------------------------------
   test8  = consTree [and',or',imp']
   ----------------------------------------------------
   -- Вывод дерева с лямбда-функциями: and', or' и imp'
   ----------------------------------------------------
   test9  = outTree test8
   ------------------------------------------------------
   -- Вывод дерева результатов применения соответствующих
   -- функций дерева and', or' и imp', применённых к вход-
   -- ным булевым значениям
   ------------------------
   test10 a b = outTree $ 
                  mapBTree (\x -> (last.btred) (App (App x a) b))
                           test8

   -- *********************************************
   -- Построение дерева лямбда-термов, отображающих
   -- следующие операции:
   -- (1) сумма чисел;
   -- (2) произведение чисел;
   -- (3) возведение числа в степень.
   -----------------------------------------------------------
   test11 = consTree [("+",0,summ),("*",0,prod1),("^",0,expn)]
   -----------------------------------------------------------
   -- Вывод дерева с лямбда-функциями: summ, prod1 и expn
   ------------------------------------------------------
   test12 = outTree test11
   -----------------------
   test13 a b = outTree $ 
                  mapBTree (\(x,y,z) -> 
                               (x,a,b,z,(unchurch.last.btred) 
                                      (App (App z 
                                                (church a))
                                           (church b))))
                           test11