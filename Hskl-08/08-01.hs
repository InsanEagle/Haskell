   -- Демонстрация конструирования простейших потен-
   -- циально  бесконечных  списков (потоков, кодан-
   -- ных) с помощью корекурсии
   -- *********************************************
   -- Функция конструирует потенциально бесконечный
   -- список натуральных чисел вида [1,1,1,...]
   --------------------------------------------
   -- ones:: [Double]
   ones = (1::Integer) : ones
   -- ***********************************************
   -- Функция конструирует  потенциально  бесконечный
   -- список натуральных чисел вида [n+1,n+2,n+3,...]
   --------------------------------------------------
   subNats:: Integer -> [Integer]
   subNats n = n : subNats (n+1)

   -- *********************************************
   -- Функция конструирует потенциально бесконечный
   -- список натуральных чисел вида [1,1,1,...]
   --------------------------------------------
   ones':: [Integer]
   ones' = 1 : map id ones'
   -- *********************************************
   -- Функция конструирует потенциально бесконечный
   -- список натуральных чисел [0,1,2,...]
   ---------------------------------------
   nats:: [Integer]
   nats = 0 : map succ nats
   -- *********************************************
   -- Функция конструирует потенциально бесконечный
   -- список нечётных натуральных чисел [1,3,5,...]
   ------------------------------------------------
   odds:: [Integer]
   odds = 1 : map (succ . succ) odds

   -- *********************************************
   -- Функция конструирует потенциально бесконечный
   -- список вида [n^2,(n+1)^2,(n+2)^2,...]
   ----------------------------------------
   squares:: Integer -> [Integer]
   squares n = map (^2) (subNats n)

   -- *********************************************
   -- Функция конструирует потенциально бесконечный
   -- список чётных натуральных чисел [0,2,4,...] с
   -- помощью комбинатора неподвижной точки (y)
   --------------------------------------------
   evens:: [Integer]
   evens = y (\f -> 0 : map (succ . succ) f)
      where y f = f (y f)

   -- **********************************************
   -- Демонстрация моделирования потенциально беско-
   -- нечных списков с помощью функционала iterate
   --
   --  itarate f x = x : iterate f (f x)
   --
   -- ***********************
   theOnes  = iterate  id   1
   theNats  = iterate (+ 1) 0
   theOdds  = iterate (+ 2) 1
   theEvens = iterate (+ 2) 0

   -- **********************************************
   -- Функция конструирует  потенциально бесконечный
   -- список натуральных чисел [0,1,2,...] с помощью
   -- функционала zipWith
   -- *************************************
   theNats1 = 0 : zipWith (+) ones theNats1

   -- ***************************
   -- Неудачные тестовые примеры:
   -------------------------------------------
   test1  = take 5 ones         == [1,1,1,1,1]
   test2  = take 5 nats         == [0,1,2,3,4]
   test3  = take 5 odds         == [1,3,5,7,9]
   test4  = take 5 evens        == [0,2,4,6,8]
   test5  = take 5 (subNats 5)  == [5,6,7,8,9]
   test6  = take 5 (squares 11) == [121,144,169,196,225]
   -----------------------------------------------------
   test7  = take 5 theOnes 
   test8  = take 5 theNats 
   test9  = take 5 theOdds 
   test10 = take 5 theEvens
   ------------------------
   test11 = take 5 theNats1
