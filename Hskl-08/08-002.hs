   -- Демонстрация отложенных вычислений в языке Haskell
   -- **************************************************
   fun1:: Int -> Int -> Int
   fun1 x y = if x>0 
                then x
                else y `div` 0
   ---------------------------
   fun2:: Int -> t -> t -> t
   fun2 n x y | n>0  = x
              | True = y
   ----------------------------------------
   test1 = fun1 34  45               ==  34
   test2 = fun2  1 234 (100 `div` 0) == 234

   -- **********************************************
   -- Демонстрация необходимости вычисления значений
   -- аргументов при выводе результата на экран
   --------------------------------------------
   fun3:: Int -> Int -> Int
   fun3 a b = a + b
   -----------------------------------------------------
   test3 = fun3 (9-3) (fun3 34 (3 `div` 0)) -- Ошибка...

   -- ***********************************************
   -- Демонстрация "отложенности" вычисления значения
   -- второго аргумента b функции fun3.
   -- Если бы вычисления были  "энергичными", то было
   -- бы получено сообщение об ошибке
   ----------------------------------
   fun4:: Int -> Int -> Int
   fun4 a b = a + 12
   --------------------------------------------
   test4 = fun4 (9-3) (fun4 34 (3 `div` 0))==18

   -- *******************************************************
   -- Демонстрация "отложенности" вычисления значения второго
   -- компонента пары (a,b).
   -- Если бы вычисления  были "энергичными", то  было  бы
   -- получено сообщение об ошибке
   -------------------------------
   fun5:: (Int,Int) -> Int
   fun5 (a,b) = a + 1
   ---------------------------------
   test5 = fun5 (3+2,-17 `div` 0)==6
   ----------------------------------
   -- Вычисления стали "энергичными":
   --------------------------------------------
   test6 = fun5 (-17 `div` 0, 34)  -- Ошибка...
