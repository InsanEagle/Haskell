   -- Демонстрация использования комбинатора неподвижной точки
   -- ********************************************************
   -- Комбинатор неподвижной точки
   -------------------------------
   y f = f (y f)

   -- ***********************************************
   -- Функция repeat' конструирует бесконечный список
   -- из одного элемента.
   -- Детализируем процесс вычислений:
   --
   -- y (1 : ) -> 1 : y (1 : )
   --          -> 1 : (1 : (y (1 : ))
   --          -> 1 : (1 : (1 : (y (1 : )))) -> ...
   ------------------------------------------------
   repeat' n = y (n : )

   -- ***************************************************
   -- Функция возвращает  все последовательности длины k,
   -- состоящие из  чисел  от 1 до n, и такие, что не су-
   -- ществует двух рядом стоящих одинаковых чисел
   -----------------------------------------------
   sequen n k = y (allDiffCore n) k (\x -> True)
   ---------------------------------------------
   allDiffCore n f =
        \k cond -> if k==1
                     then map (\x -> [x]) $ filter cond [1..n]
                     else concat $ map (\x -> map (x :)
                                                  (f (k-1) (/=x)))
                                       (filter cond [1..n])

   -- ******************************************************
   -- Функция возвращает все возрастающие последовательности
   -- длины k, состоящие из чисел от 1 до n
   -----------------------------------------------
   sequen' n k = y (allDiffCore' n) k (\x -> True)
   -----------------------------------------------
   allDiffCore' n f =
        \k cond -> if k==1
                     then map (\x -> [x]) $ filter cond [1..n]
                     else concat $ map (\x -> map (x:)
                                                  (f (k-1) (>x)))
                                       (filter cond [1..n])
   -- ***************************
   -- Неудачные тестовые примеры:
   ------------------------------
   test1 = repeat' 12         
   test2 = take 5 (repeat' 1) 
   --------------------------
   test3 = sequen 4 3
   test4 = sequen' 10 5
