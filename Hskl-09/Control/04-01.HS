   -- Демонстрация функции, трансформирующей произвольный
   -- лямбда-терм в CL-терм в базисе {I,K,S}
   -- [Душкин,2007,с.280-281]
   -- ***********************
   module Transf where
   import L1
   -- ************************************************
   -- Результат абстракции CL-терма относительно  x  в 
   -- исчислении комбинаторов определяется индуктивно:
   --
   -- \x.x  = I
   -- \x.P  = KP,            если x не входит свободно
   --                        в лямбда-терм P
   -- \x.PQ = S(\x.P)(\x.Q), если x входит свободно
   --                        в лямбда-терм (PQ)
   --------------------------------------------
   transf:: Lambda -> Lambda 
   transf (Var x)   = Var x
   transf (App x y) = App (transf x) (transf y)
   transf (Lam x (Var y))     | x==y           = i
   transf (Lam x e)           | not (free x e) = App k (transf e)
   transf (Lam x l@(Lam y e)) | free x l       = transf (Lam x 
                                                        (transf l))
   transf (Lam x l@(App e1 e2)) = (App (App s (transf (Lam x e1))) 
                                              (transf (Lam x e2)))
   -- ************************************************************
   -- Предикат, устанавливающий, является ли предметная
   -- переменная x свободной в заданном лямбда-терме
   -------------------------------------------------
   free:: [Char] -> Lambda -> Bool
   free x (Var y)     = x==y
   free x (App e1 e2) = free x e1 || free x e2
   free x (Lam y e)   = x/=y && free x e
   -- *************************************
   -- Константные функции для представления
   -- базисных комбинаторов I, K, S
   --------------------------------
   i = Var "I"
   k = Var "K"
   s = Var "S"
   -- **********************
   -- Примеры лямбда-термов:
   ------------------------------
   lam1 = Lam "x" (App (Var "x") 
                       (App (App (Var "y") (Var "x")) 
                            (Var "z")))
   ------------------------------------
   lam2  = Lam "x" (Lam "y" (Var "x"))
   lam2' = Lam "x" (Lam "y" (Var "y"))
   --------------------------------------------------
   lam3 = Lam "x" (Lam "y" (App (Var "y") (Var "x")))
   --------------------------------------------------
   lam4 = Lam "x" (Lam "y" (App (Var "x") (Var "y")))
   lam5 = Lam "f" (Lam "x" (App (App (Var "f") (Var "x"))
                                (Var "x")))
   lam6 = Lam "x" (App 
                    (Var "b") 
                    (App (Var "f") (App (Var "a") (Var "x"))))
   -----------------------------------------------------------
   -- Функция, моделирующая комбинатор S
   --------------------------------------
   lam7 = Lam "x" (Lam "y" (Lam "z" (App
                                      (App (Var "x") (Var "z")) 
                                      (App (Var "y") (Var "z")))))
   ---------------------------------------------------------------
   lam8 = Lam "x" (App (App (App s (Var "x")) (Var "y")) 
                       (Var "z"))
   ---------------------------------------------
   lam9 = Lam "x" (App (App (Var "x") (Var "z")) 
                       (App (Var "y") (Var "z")))
   -----------------------------------------------------
   -- Функция, моделирующая комбинатор неподвижной точки
   -- с вызовом по значению (по Д.Тромпу)
   --
   --  (\x.\y.xyx)(\y.\x.y(xyx))
   ------------------------------------------------------------
   lam10 = App (Lam "x" (Lam "y" (App (App (Var "x") (Var "y"))
                                           (Var "x"))))
               (Lam "y" (Lam "x" (App (Var "y") 
                                      (App (App (Var "x") (Var "y"))
                                           (Var "x")))))
   -----------------------------------------------------
   -- Функция, моделирующая комбинатор B
   -------------------------------------
   lam11 = Lam "x" (Lam "y" (Lam "z" 
                             (App (Var "x")  
                             (App (Var "y") (Var "z")))))
   ------------------------------------------------------
   lam12 = Lam "f" (Lam "x" (App (Var "f")
                                 (App (Var "x") (Var "x"))))
   ------------------------------------------------------------
   lam13 = Lam "x" (Lam "y" (App (App (App (Var "y") (Var "x"))
                                      (Var "x")
                                 )
                                 (Var "y")))
   -----------------------------------------------------
   -- Функция, моделирующая комбинатор неподвижной точки
   --     с вызовом по имени (по Х.Карри)
   --
   --     \f.(\x.f(xx))(\x.f(xx))
   ---------------------------------------------
   lam14  = Lam "f" (App (Lam "x" (App (Var "f") 
                                   (App (Var "x") (Var "x"))))
                     (Lam "x" (App (Var "f") 
                                   (App (Var "x") (Var "x")))))

   -- ***************************
   -- Неудачные тестовые примеры:
   -- ********************************************
   -- Результаты перевода лямбда-термов в CL-термы
   -- в базисе {I,K,S}:
   ----------------------
   test1  = transf (lam1)
   test2  = transf (lam2)
   test2' = transf (lam2')
   test3  = transf (lam3)
   test4  = transf (lam4)
   test5  = transf (lam5)
   test6  = transf (lam6)
   test7  = transf (lam7)
   test8  = transf (lam8)
   test9  = transf (lam9)
   test10 = transf (lam10)
   test11 = transf (lam11)
   test12 = transf (lam12)
   test13 = transf (lam13)
   test14 = transf (lam14)