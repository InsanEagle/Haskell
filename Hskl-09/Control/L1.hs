   -- Демонстрация модуля, содержащего описание типа данных
   -- "Ламбда-терм" и связывание  его  с классом  Show  для
   -- визуализации ламбда-термов в виде строк.
   --
   -- [Душкин,2007,с.279-280]
   -- ***********************
   module L1 (Lambda(..))
   where
   -----------------------------------------------
   -- Описание типа для представления ламбда-терма
   -----------------------------------------------
   -- Ламбда-терм:
   -- (1) предметная переменная, имя которой задаётся 
   --     в виде строки (конструктор Var);
   -- (2) аппликация ламбда-термов,  т.е.  приложение
   --     ламбда-термов друг к другу (конструктор App);
   -- (3) ламбда-абстракция, в которой указывается связь
   --     предметной переменной (имя которой  задаётся в
   --     виде строки) с ламбда-термом (конструктор Lam)
   ----------------------------------------------------------
   data Lambda =   Var String        -- Предметная переменная
                 | App Lambda Lambda -- Аппликация 
                 | Lam String Lambda -- Абстракция
     deriving Eq
   -----------------------------------------------------------
   -- Тип Lambda является экземпляром класса Eq, т.е. значения
   -- типа Lambda могут сравниваться  друг  с другом с помощью
   -- операций сравнения (==) и (/=)
   -- ********************************************************
   -- Реализация типа Lambda для класса Show для представления
   -- ламбда-термов в виде строк, т.е. представление типа Lamb-
   -- da в качестве экземпляра класса Show.
   --   Представление ламбда-терма будет следующим:
   --   (1) символ "ламбда" - знак "\";
   --   (2) предметная переменная - её имя;
   --   (3) аппликация - два ламбда-терма, заключённые в скобки 
   --       (или без скобок, если ламбда-термы простые);
   --   (4) абстракции, участвующие в аппликации - ламбда-абст-
   --       ракции, заключённые в круглые скобки;
   --   (5) абстракция - строка вида "\x.TERM",
   --       где x - имя предметной переменной
   ------------------------------------------
   instance Show Lambda where
      show (Var x)   = x
      show (App x y) = case y of
                         App _ _ -> showLam x ++ "(" ++ show y ++ ")"
                         _       -> showLam x ++ showLam y
            where showLam l@(Lam _ _) = "(" ++  show l  ++ ")"
                  showLam x           = show x
      show (Lam x e)  = "\\" ++ x ++ "." ++ show e
