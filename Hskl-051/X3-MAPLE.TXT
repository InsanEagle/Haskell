    2ПРИЛОЖЕНИЕ 1.
    2ПАКЕТ Maple В МАТЕМАТИЧЕСКОЙ ЛОГИКЕ

   Для обработки логической информации в математическом пакете Map-
le имеется пакет 1  0Logic.  Для использования команды пакета Logic не-
обходимо загрузить либо весь пакет при помощи команды
 ш1.0

   with(Logic),

либо нужную команду -

   with(Logic,command).

 ш1.2
   Также допускается  непосредственное обращение к команде с указа-
нием префикса пакета
 ш1.0

   Logic[command](arg),

 ш1.2
где arg - аргументы команды.
   Для построения формул языка нулевого порядка в Maple используют-
ся:
   -  _ 1логические константы . 0: 2  0true и 2  0false (соответствуют  2И 0 и  2Л 0);
   -  _ 1логические операторы . 0:
 ш1.0

     &and     -  1конъюнкция 0 (&);  &nand -  1отрицание конъюнкции 2  0( 7; 0&);
     &or      -  1дизъюнкция 0 ( 7v 0);  &nor 2   0-  1отрицание дизъюнкции 2  0( 7;v 0);
     &not     -  1отрицание 0  ( 7; 0);  &iff  -  1если и только если 0;
     &implies -  1импликация 0 ( 76 0);  &xor  -  1исключающее или 0.

   При этом учтите соответствие, приведённое в следующей таблице:

   ┌────────────────────────╥──────────────────────────────┐
   │ 3"Формула" в пакете Logic 0║ 3Формула языка нулевого порядка 0│
   ╞════════════════════════╬══════════════════════════════╡
   │      &not A            ║     7; 0A                        │
   │      A &and B          ║    (A&B)                     │
   │      A &or B           ║    (A 7v 0B)                     │
   │      A &implies B      ║    (A 76 0B)                     │
   │      A &nand B         ║     7; 0(A&B)                    │
   │      A &nor B          ║     7; 0(A 7v 0B)                    │
   │      A &iff B          ║    (A 756 0B)                    │
   │      A &xor B          ║    (A 7v 0~B) 7" 0((A& 7; 0B) 7v 0( 7; 0A&B))    │
   └────────────────────────╨──────────────────────────────┘

   Пакет математической логики 1  0Logic состоит из 14 команд:

    1BooleanSimplify, Canonicalize, Contradiction, Dual, Environment,
    1Equivalent, Export, Implies, Import, Normalize, Random, Satisfy,
    1Tautology, TruthTable. 0

 ш1.2
   Охарактеризуем некоторые из них и приведём примеры.
                           3Команда 0  2Satisfy
            ( 1нахождение значений атомов, 0  1обеспечивающих
                    1истинность заданной формулы 0)
    _ 1Назначение команды . 0: позволяет найти все те интерпретации формулы
в языке нулевого порядка, при которых данная формула принимает зна-
чение  1true 0,  т.е. команда позволяет решить логическое уравнение ви-
да:
 ш1.0

   < 1Формула 0>=true.

 ш1.2
    _ 1Синтаксис . 0: Satisfy(F) или Satisfy(F,alpha).
    _ 1Аргументы . 0: F - формула языка  нулевого  порядка,  которая  может
быть определена как перед выполнением команды, так и непосредствен-
но в команде;  alpha - список атомов, имеющих вхождение в формулу F
(указывается в фигурных скобках).
    _ 1Результат выполнения . 0: список значений атомов, при которых данная
формула принимает значение  1true 0.
    2Примеры 0 ( 1использования команды Satisfy 0).
 ш1.0

    21.  0> with(Logic);
      > F:=(A &and B);
      > Satisfy(F);
         {A = true, B = true}

 ш1.1
   Формула (A&B) в команде задана косвенно и не указан второй аргу-
мент в команде Satisfy.  В результате получена интерпретация данной
формулы:  1Val 0(A)= 2И 0,  1Val 0(B)= 2И 0.
 ш1.0

    22.  0> with(Logic);
      > Satisfy(A &or B);
         {A = true, B = false}

 ш1.1
   Непосредственно в  команде была задана 2  0формула (A 7v 0B) и не указан
второй аргумент команды. В результате получена интерпретация данной
формулы:  1Val 0(A)= 2И 0,  1Val 0(B)= 2Л 0.
 ш1.0

    23.  0> with(Logic);
      > Satisfy(A &or B,{A,B,C});
         {A = true, B = false, C = false}

 ш1.1
   Непосредственно в  команде  была  задана 2   0формула (A 7v 0B) и указан
список атомов,  для которых нужно  найти  конкретную  интерпретацию
данной формулы. В результате получена интерпретация данной формулы:
 ш1.0

    1Val 0(A)= 2И 0,  1Val 0(B)= 2Л 0,  1Val 0(C)= 2Л 0.

 ш1.2
                         3Команда 0  2TruthTable
            ( 1нахождение истинностного значения формулы
                    1при заданных значения атомов 0)
    _ 1Назначение команды . 0:  позволяет определить истинностное  значение
формулы  в  языке  нулевого  порядка при указанных наборах значений
пропозициональных переменных.
    _ 1Синтаксис . 0: TruthTable(F,alpha) или TruthTable(F,alpha,form).
    _ 1Аргументы . 0: F - формула языка  нулевого  порядка,  которая  может
быть определена как перед выполнением команды, так и непосредствен-
но в команде;  alpha - список атомов, имеющих вхождение в формулу F
(указывается  в квадратных скобках);  form - имя канонической формы
(MOD2 - сложение по модулю 2).
    _ 1Результат выполнения . 0: логическая константа (true или false).
    2Примеры 1  0( 1использования команды TruthTable 0).
 ш1.0

    21.  0> with(Logic);
      > T1:=TruthTable(A &xor B,[A,B]):
      > T1[true,false];
         true

 ш1.1
   Формула (A 7v 0~B) в команде задана непосредственно и не указан тре-
тий аргумент в команде TruthTable. В результате получено истинност-
ное значение данной формулы:  1Val 0(A 7v 0~B)= 2И 0.
 ш1.0

    22.  0> with(Logic);
      > T2:=TruthTable(&not (A) &nor B &iff C,[A,B,C]):
      > T2[true,false,false];
         false

 ш1.1
   Непосредственно в команде была задана 2  0формула ( 7; 0( 7; 0A 7v 0B) 756 0С) и  не
указан третий аргумент команды.  В результате получено истинностное
значение данной формулы:  1Val 0( 7; 0( 7; 0A 7v 0B) 756 0С)= 2Л 0.
 ш1.0

    23.  0> with(Logic);
      > T3:=TruthTable(A &xor B,[A,B],form=MOD2):
      > T3[1,0];
         1

 ш1.2
   Непосредственно в  команде  была задана 2  0формула (A 7v 0~B) и указана
форма представления исходной формулы языка нулевого порядка.
   В результате  получено  истинностное  значение  данной  формулы:
 1Val 0(A 7v 0~B)=1.
                         3Команда 0  2Equivalent
              ( 1проверка эквивалентности двух формул 0)
    _ 1Назначение команды . 0:  позволяет  определить 1   0эквивалентность двух
формул языка нулевого порядка.
    _ 1Синтаксис . 0: Equivalent(F 41 0,F 42 0).
    _ 1Аргументы . 0: F 41 0 и F 42 0 - формулы языка нулевого порядка,  причём они
могут быть определены как перед выполнением команды Equivalent, так
и непосредственно в данной команде.
    _ 1Результат выполнения . 0: логическая константа (true или false).
    2Примеры 0 ( 1использования команды Equivalent 0).
 ш1.0

    21.  0> with(Logic);
      > Equivalent(P &or Q,P &or Q);
         true

 ш1.1
   В данном примере после вызова пакета Logic, происходит обращение
к команде Equivalent,  причём формулы в данной команде задаются не-
посредственно: F 41 7" 0(P 7v 0Q) и F 42 7" 0(P 7v 0Q).
   Результатом выполнения команды Equivalent является true.
 ш1.0

    22.  0> with(Logic);
      > F 41 0:=(&not P) &implies Q;
      > Equivalent(F 41 0,P &or Q);
         true

 ш1.1
   В этом случае одна из формул задаётся косвенно (перед выполнени-
ем команды Equivalent) F 41 7" 0( 7; 0P 76 0Q),  а другая - задана непосредствен-
но: F 42 7" 0(P 7v 0Q).
   Результатом выполнения  команды  Equivalent является true,  т.к.
формулы F 41 0 и F 42 0 эквивалентны.
 ш1.0

    23.  0> with(Logic);
      > F 41 0:=(&not P) &implies Q; F 42 0:=&not(P &and Q);
      > Equivalent(F 41 0,F 42 0);
         false

 ш1.2
   Формулы F 41 7" 0( 7; 0P 76 0Q)  и F 42 7"; 0(P&Q) заданы косвенно и не являются эк-
вивалентными.
                          3Команда 0  2Tautology
                 ( 1проверка общезначимости формулы 0)
    _ 1Назначение команды . 0:  позволяет  проверить заданную формулу языка
нулевого порядка на тождественную истинность (другими словами,  оп-
ределить является ли формула общезначимой).
    _ 1Синтаксис . 0: Tautology(F) или Tautology(F,'p').
    _ 1Аргументы . 0: F  -  формула  языка нулевого порядка,  которая может
быть определена как перед выполнением команды, так и непосредствен-
но в команде;  'p' - имя переменной, значением которой будут значе-
ния атомов, при которых данная формула принимает значение  2И 0 или  2Л 0.
    _ 1Результат выполнения . 0:  значение  формулы true или false,  а если
указывается второй параметр (имя переменной), то и значения атомов,
при которых данная формула принимает полученное значение.
    2Примеры 0 ( 1использования команды Tautology 0).
 ш1.0

    21.  0> with(Logic);
      > Tautology(((A &and B) &or &not (A)) &or &not (B));
         true

 ш1.1
   В команде непосредственно задана формула  ((A&B) 7v; 0A 7v; 0B).  В  ре-
зультате получаем, что формула является общезначимой.
 ш1.0

    22.  0> with(Logic);
      > Tautology(A &and (&not A));
         false

 ш1.1
   В команде  непосредственно  задана формула (A& 7; 0A).  В результате
получаем, что формула не является общезначимой.
 ш1.0

    23.  0> with(Logic);
      > Tautology(A &or (&not A),'p');
         true
      > p;
         {A = true}

 ш1.2
   В команде непосредственно задана формула (A 7v; 0A) и  указан  пара-
метр 'p'. В результате получено, что формула общезначима, значением
атома A является true, а при этом значении данная формула принимает
значение true.
    3Замечание 0.
 ш1.1
   В версии математического пакета Maple 9.5 при использовании  ко-
манды следующего вида
 ш1.0

   Tautology(F,'p');

 ш1.1
результат выполнения не сохраняется в переменной p.

 ш1.2
                        3Команда 0  2Contradiction
                 ( 1проверка невыполнимости формулы 0)
    _ 1Назначение команды . 0:  позволяет проверить заданную формулу  языка
нулевого порядка на тождественную ложность (другими словами,  опре-
делить является ли формула невыполнимой).
    _ 1Синтаксис . 0: Contradiction(F) или Contradiction(F,'p').
    _ 1Аргументы . 0: F  -  формула  языка нулевого порядка,  которая может
быть определена как перед выполнением команды, так и непосредствен-
но в команде;  'p' - имя переменной, значением которой будут значе-
ния атомов, при которых данная формула принимает значение  2И 0 или  2Л 0.
    _ 1Результат выполнения . 0:  значение  формулы true или false,  а если
указывается второй параметр (имя переменной), то и значения атомов,
при которых данная формула принимает полученное значение.
    2Примеры 0 ( 1использования команды Contradiction 0).
 ш1.0

    21.  0> with(Logic);
      > Contradiction(((A &and B) &and &not (A)) &and &not (B));
         true

 ш1.1
   В команде  непосредственно  задана формула ((A&B)& 7; 0A& 7; 0B).  В ре-
зультате получаем, что формула является невыполнимой.
 ш1.0

    22.  0> with(Logic);
      > Contradiction(A &or (&not A));
         false

 ш1.1
   В команде непосредственно задана формула  (A 7v; 0A).  В  результате
получаем, что формула не является невыполнимой.
 ш1.0

    23.  0> with(Logic);
      > Contradiction(A &and (&not A),'p');
         true
      > p;
         {A = true}

 ш1.2
   В команде  непосредственно  задана формула (A& 7; 0A) и указан пара-
метр 'p'. В результате получено, что формула невыполнима, значением
атома A является true, а при этом значении данная формула принимает
значение false.
    3Замечание 0.
 ш1.1
   В версии математического пакета Maple 9.5 при использовании  ко-
манды следующего вида
 ш1.0

   Contradiction(F,'p');

 ш1.1
результат выполнения не сохраняется в переменной p.

 ш1.2
             3Команда 2 BooleanSimplify 0 ( 1упрощение формулы 0)
    _ 1Назначение команды . 0:  позволяет упростить формулу языка  нулевого
порядка;  под   _ 1упрощением  формулы . 0  будем понимать запись формулы в
"более простом" виде, содержащем в записи меньшее количество симво-
лов.
    _ 1Синтаксис . 0: BooleanSimplify(F).
    _ 1Аргументы . 0: F  -  формула  языка нулевого порядка,  которая может
быть определена как перед выполнением команды, так и непосредствен-
но в команде.
    _ 1Результат выполнения . 0:  формула  языка нулевого порядка,  имеющая
"более простой" вид.
    2Примеры 0 ( 1использования команды BooleanSimplify 0).
 ш1.0

    21.  0> with(Logic);
      > BooleanSimplify(A &or (A &and B));
        A

 ш1.1
   Формула F 7" 0(A 7v 0(A&B)) задана непосредственно  в  команде  Boolean-
Simplify; в результате упрощения получена формула A.
 ш1.0

    22. 0 > with(Logic);
      > F:=((A &and B) &or (A &and (&not B)));
      > BooleanSimplify(F);
         A

 ш1.1
   Формула F 7" 0((A&B) 7v 0(A& 7; 0B))  задана косвенно в команде BooleanSimp-
lify; в результате упрощения получена формула A.
 ш1.0

    23.  0> with(Logic);
      > BooleanSimplify(((A &and B) &or (&not (A) &and C)) &or
                        (B &and C));
         (A &and B) &or (C &and &not (A))

 ш1.2
   Формула F 7" 0(A&B) 7v 0( 7; 0A&C) 7v 0(B&C) задана  непосредственно  в  команде
BooleanSimplify;  в  результате  упрощения  будет  получена формула
(A&B) 7v 0(C& 7; 0A).
                         3Команда 2 Environment
        ( 1задание уровня автоматического 0  1упрощения формулы 0)
    _ 1Назначение команды . 0:  позволяет задавать уровень упрощения формул
языка нулевого порядка.
    _ 1Синтаксис . 0: Environment(N).
    _ 1Аргументы . 0: N - целое число от 0 до 2, задающее уровень автомати-
ческого упрощения:  N=0 - в результате получаются формулы без упро-
щения;  N=1  -  в  результате получаются формулы,  которые содержат
вхождения логических операторов:  &and, &or и &not; N=2 - в резуль-
тате получаются формулы, которые используют true и false и включают
преобразования вида: A &and A─ 76 0A, A &or A─ 76 0A.
    2Примеры 0 ( 1использования команды Environment 0).
 ш1.0

    21.  0> with(Logic);
      > Environment(0);
      > A &and B &and A;
         (A &and B) &and A
      > A &iff A;
         Logic: -&iff(A,A);

    22. 0 > with(Logic);
      > Environment (1);
      > A &and B &and A;
         (B &and A) &and A
      > A &iff A;
         (&not (A) &and &not (A)) &or (A &and A)

    23. 0 > with(Logic);
      > Environment (2);
      > A &and B &and A;
         B &and A
      > A &iff A;
         A &or &not (A)

 ш1.2
                        3Команда 2 Canonicalize
            ( 1представление формулы 0  1в каноническом виде 0)
    _ 1Назначение команды . 0:  позволяет преобразовать формулу языка нуле-
вого порядка в канонический вид.
   Существует три канонические формы:
 ш1.1
   (1) CNF -  1конъюнктивная нормальная форма 0 (КНФ);
   (2) DNF -  1дизъюнктивная нормальная форма 0 (ДНФ);
   (3) Mod2 -  1форма 0 " 1по модулю 2 0".

 ш1.2
    _ 1Синтаксис . 0: Canonicalize(F,alpha) или Canonicalize(F,alpha,form).
    _ 1Аргументы . 0: F  -  формула  языка нулевого порядка,  которая может
быть определена как перед выполнением команды, так и непосредствен-
но  в команде;  alpha - список атомов,  имеющих вхождение в формулу
(указывается в фигурных скобках);  form -  имя  канонической  формы
(DNF - дизъюнктивная нормальная форма, CNF - конъюнктивная нормаль-
ная форма, MOD2 - сложение по модулю 2).
    _ 1Результат выполнения . 0:  формула языка нулевого порядка, представ-
ленная в указанной в команде канонической форме.  Заметим,  если  в
команде не указывается требуемая каноническая форма,  то по умолча-
нию формула  преобразовывается  в  дизъюнктивную  нормальную  форму
(ДНФ).
    2Примеры 0 ( 1использования команды Canonicalize 0).
 ш1.0

    21.  0> with(Logic);
      > Canonicalize(A &and B,{A,B,C});
         ((B &and A) &and C) &or ((B &and A) &and &not (C))

 ш1.1
   В данном примере в команде Canonicalize формула (A&B) задана не-
посредственно,  а также указан список атомов {A,B,C}, имеющих вхож-
дение в формулу. В команде не указана каноническая форма, в которую
требуется преобразовать заданную формулу, поэтому в результате пре-
образования получена ДНФ: (B&A&C) 7v 0(B&A& 7; 0C).
 ш1.0

    22.  0> with(Logic);
      > Canonicalize(A &xor B,{A,B},form=MOD2);
         A+B

 ш1.1
   В данном  примере  в команде Canonicalize была задана непосредс-
твенно формула (A xor B),  список атомов {A,B}, имеющих вхождение в
формулу, и требуемая каноническая форма - MOD2.
   В результате преобразования получена "формула" (A+B).
 ш1.0

    23.  0> with(Logic);
      > Canonicalize(A &xor B,{A,B},form=CNF);
         (B &or A) &and (&not (B) &or &not (A))

   В результате преобразования получена КНФ: (B 7v 0A)&( 7; 0B 7v; 0A).

    24.  0> with(Logic);
      > Canonicalize (A &xor B,{A,B},form=DNF);
         (&not (B) &and A) &or (&not (A) &and B)

 ш1.2
   В результате преобразования получена ДНФ: ( 7; 0B&A) 7v 0( 7; 0A&B).
                          3Команда 2 Normalize
        ( 1представление формулы в виде 0  1дизъюнкции 0  1конъюнкций
                     1или конъюнкции дизъюнкций 0)
    _ 1Назначение команды . 0: позволяет представить формулу языка нулевого
порядка в виде нормальной форме (дизъюнкции конъюнкций или конъюнк-
ции дизъюнкций).
    _ 1Синтаксис . 0: Normalize(F) или Normalize(F,form).
    _ 1Аргументы . 0: F - формула языка  нулевого  порядка,  которая  может
быть определена как перед выполнением команды, так и непосредствен-
но в команде;  form - имя  канонической формы (CNF).
    _ 1Результат выполнения . 0:  формула языка нулевого порядка, представ-
ляющая собой дизъюнкцию конъюнкций,  если в команде не  указывается
требуемая каноническая форма, в противном случае - конъюнкцию дизъ-
юнкций.
    2Примеры 0 ( 1использования команды Normalize 0).
 ш1.0

    21.  0> with(Logic);
      > F:=(&not (A &and B));
      > Normalize(F);
         &not (A) &or &not (B)

   В результате получена формула ( 7; 0A 7v; 0B).

    22.  0> with(Logic);
      > Normalize(A &and (B &or C));
         (A &and B) &or (A &and C)

   В результате получена формула ((A&B) 7v 0(A&C)).

    23.  0> with(Logic);
      > Normalize(&not (A &or B),form=CNF);
         &not (A) &and &not (B)

 ш1.2
   В результате получена формула ( 7; 0A& 7; 0B).
                           3Команда 0  2Random
     ( 1построение случайной 0  1формулы, 0  1содержащей заданные атомы 0)
    _ 1Назначение команды . 0: позволяет случайным образом построить форму-
лу языка нулевого порядка, содержащую вхождения заданных атомов.
    _ 1Синтаксис . 0: Random(alpha) или Random(alpha,form).
    _ 1Аргументы . 0: alpha - список атомов,  имеющих вхождения в конструи-
руемую формулу (указывается в фигурных скобках);  form - имя  одной
из  канонических форм (DNF - дизъюнктивная нормальная форма,  CNF -
конъюнктивная нормальная форма,  MOD2 - сложение по модулю 2). Если
в команде не указывается каноническая форма,  то по умолчанию стро-
ится ДНФ.
    _ 1Результат выполнения . 0:  формула языка нулевого порядка, представ-
ленная в заданной канонической форме.
    2Примеры 0 ( 1использования команды Random 0).
 ш1.0

    21.  0> with(Logic);
      > # Построение ДНФ
      > Random({A,B});
         ((B &and A) &or ((&not B) &and (&not A))) &or
         (A &and (&not B))

 ш1.1
   В команде Random указан только список атомов,  имеющих вхождение
в конструируемую формулу.
   В результате получена ДНФ:

   (B&A) 7v 0( 7; 0B& 7; 0A) 7v 0(A& 7; 0B).

    22.  0> with(Logic);
      > # Построение ДНФ
      > Random({A,B},form=DNF);
         (((B &and A) &or (&not (B) &and &not (A))) &or
          (A &and &not (B))) &or (B &and &not (A))

 ш1.1
   В команде Random указан и список атомов,  и каноническая форма -
DNF. В результате получена ДНФ: (B&A) 7v 0( 7; 0B& 7; 0A) 7v 0(A& 7; 0B) 7v 0(B& 7; 0A).
 ш1.0

    23.  0> with(Logic);
      > # Построение КНФ
      > Random({A,B},form=CNF);
         (B &or A) &and (&not (B) &or (&not A))

   В результате получена формула (B 7v 0A)&( 7; 0B 7v; 0A), являющаяся КНФ.

    24.  0> with(Logic);
      > Random({A,B,C},form=MOD2);
         B A C + A + B + B A

 ш1.2
   В команде Random указан и список атомов,  и каноническая форма -
MOD2. В результате получена формула (B 77 0A 77 0C+A+B+B 77 0A).
                            3Команда 0  2Dual
           ( 1нахождение формулы, 0  1двойственной для 0  1данной 0)
    _ 1Назначение команды . 0: позволяет найти двойственную формулу для за-
данной  формулы  языка нулевого порядка или двойственное логическое
уравнение для заданного логического уравнения.
   Под  _ 1двойственной . 0  ( _ 1дуальной . 0)  _ 1формулой . 0 (или  _ 1дуалом . 0) 1  _для формулы . 0  1F
понимается формула языка нулевого порядка,  содержащая только логи-
ческие  операторы  7; 0,&, 7v 0 и полученная в результате  1одновременной 0  1за-
 1мены 0 в исходной формуле F буквы & на букву  7v 0, а буквы  7v 0 - на &. За-
метим,  если формула F имеет вхождения других логических операторов
(например:   76 0,  756 0), то вначале они выражаются через  7; 0,&, 7v 0, а только
затем ищется дуальная формула.
   Под  _ 1логическим уравнением . 0 будем понимать выражение вида:  F=true
или F=false, где F - формула языка нулевого порядка.
   Под  _ 1двойственным . 0 ( _ 1дуальным . 0)  _ 1логическим уравнением, соответствую-
 _ 1щим  логическому  уравнению . 0  F=true (F=false) понимается логическое
уравнение Dual(F)=false (Dual(F)=true),  где Dual(F) - формула, яв-
ляющаяся дуалом для формулы F.
    _ 1Синтаксис . 0: Dual(F).
    _ 1Аргументы . 0: F  -  формула  языка  нулевого порядка или логическое
уравнение, которые могут быть определены как косвенно, так и непос-
редственно в команде.
    _ 1Результат выполнения . 0:  формула языка нулевого порядка или  логи-
ческое уравнение, являющиеся дуалами для F.
    2Примеры 0 ( 1использования команды Dual 0).
 ш1.0

    21.  0> with(Logic);
      > Dual(A &and &not (A)=false);
         &not (A) &or A = true

 ш1.1
   В команде  Dual  непосредственно  задано  логическое   уравнение
(A& 7; 0A)= 2Л 0.  В результате получено логическое уравнение (A 7v; 0A)= 2И 0, яв-
ляющееся дуалом для данного.
 ш1.0

    22.  0> with(Logic);
      > Dual(((&not (B) &and &not (A)) &and C) &or B);
         B &and ((&not (B) &or &not (A)) &or C)

 ш1.2
   В команде  Dual задана непосредственно формула (( 7; 0B& 7; 0A&C) 7v 0B).  В
результате получена двойственная формула (B&( 7; 0B 7v; 0A 7v 0C)).
                           3Команда 2 Export
       ( 1преобразование формул 0  1в общесистемные представления 0)
    _ 1Назначение команды . 0:  позволяет преобразовывать формулу языка ну-
левого порядка в некоторое слово, которое "понимают" другие пакеты,
входящие в Maple.
    _ 1Синтаксис . 0: Export(F,form).
    _ 1Аргументы . 0: F - формула языка нулевого порядка;  form - имя кано-
нической формы:  'boolean' - в результате получаются формулы, кото-
рые содержат вхождения логических операторов:  &and,  &or  и  &not;
'MOD2' - в результате получаются формулы, которые включают преобра-
зования вида: &and ─ 76 0 " 77 0", &xor ─ 76 0 "+", true ─ 76 0 1, false ─ 76 0 0.
    _ 1Результат выполнения . 0: формула, имеющая требуемый вид.
    2Примеры 0 ( 1использования команды Export 0).
 ш1.0

   > with(Logic);
   > Export(A &or B,form=MOD2);
      1 + ( 1 + A ) ( 1 + B )
   > Export(&and (A,B,C) &or B,from=boolean);
      A and B and C or B
 ш1.2
